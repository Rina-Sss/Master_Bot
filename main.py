import os
import re
import json
import random
import sqlite3
from threading import Thread
from flask import Flask, Response
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler

# ---------- CONFIG ----------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
DB_PATH = "profiles.db"
PORT = int(os.environ.get("PORT", 5000))
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set")

# ---------- DB helpers ----------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS profiles (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        name TEXT,
        age TEXT,
        role TEXT,
        photo_id TEXT,
        inventory TEXT,
        stats TEXT,
        exp INTEGER,
        bio TEXT
    )""")
    conn.commit()
    conn.close()

def get_profile(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM profiles WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    keys = ["user_id","username","name","age","role","photo_id","inventory","stats","exp","bio"]
    return dict(zip(keys, row))

def save_profile(data: dict):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    INSERT INTO profiles(user_id, username, name, age, role, photo_id, inventory, stats, exp, bio)
    VALUES(?,?,?,?,?,?,?,?,?,?)
    ON CONFLICT(user_id) DO UPDATE SET
      username=excluded.username,
      name=excluded.name,
      age=excluded.age,
      role=excluded.role,
      photo_id=excluded.photo_id,
      inventory=excluded.inventory,
      stats=excluded.stats,
      exp=excluded.exp,
      bio=excluded.bio
    """, (
        data.get("user_id"),
        data.get("username"),
        data.get("name"),
        data.get("age"),
        data.get("role"),
        data.get("photo_id"),
        json.dumps(data.get("inventory", []), ensure_ascii=False),
        json.dumps(data.get("stats", {}), ensure_ascii=False),
        data.get("exp", 0),
        data.get("bio", "")
    ))
    conn.commit()
    conn.close()

# ---------- Dice parser ----------
def roll_expression(expr: str):
    expr = expr.strip().lower()
    m = re.match(r"^(\d+)d(\d+)$", expr)
    if not m:
        return None
    count, sides = int(m.group(1)), int(m.group(2))
    if count > 100 or sides > 1000:
        return None
    rolls = [random.randint(1, sides) for _ in range(count)]
    return rolls

# ---------- Conversation states for profile creation/edit ----------
(NAME, AGE, ROLE, PHOTO, BIO, STATS_DONE) = range(6)

# ---------- Handlers ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø RPG‚Äë–±–æ—Ç. /roll 2d20  ‚Äî –±—Ä–æ—Å–æ–∫. /–∞–Ω–∫–µ—Ç–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")

async def roll_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /roll 2d20")
        return
    expr = args[0]
    rolls = roll_expression(expr)
    if rolls is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /roll 2d20")
        return
    await update.message.reply_text(f"üé≤ {expr}: {rolls}  ‚Äî —Å—É–º–º–∞ {sum(rolls)}")

# --- Profile conversation ---
async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    # If username provided, show that user's profile
    if args:
        target = args[0].lstrip("@")
        # try find by username
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM profiles WHERE username = ?", (target,))
        row = cur.fetchone()
        conn.close()
        if not row:
            await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        return await show_profile_by_id(update, context, row[0])
    # own profile or start creation
    prof = get_profile(user.id)
    if prof:
        return await show_profile_by_id(update, context, user.id)
    await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º.\n–ö–∞–∫ –∑–æ–≤—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
    return NAME

async def name_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"] = {"user_id": update.effective_user.id, "username": update.effective_user.username}
    context.user_data["profile"]["name"] = update.message.text.strip()
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
    return AGE

async def age_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["age"] = update.message.text.strip()
    await update.message.reply_text("–†–æ–ª—å / –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
    return ROLE

async def role_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["role"] = update.message.text.strip()
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'")
    return PHOTO

async def photo_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prof = context.user_data["profile"]
    if update.message.photo:
        prof["photo_id"] = update.message.photo[-1].file_id
    else:
        prof["photo_id"] = None
    await update.message.reply_text("–ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è (bio):")
    return BIO

async def bio_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"]["bio"] = update.message.text.strip()
    # defaults
    context.user_data["profile"]["inventory"] = []
    context.user_data["profile"]["stats"] = {"strength": 1, "dex":1, "int":1}
    context.user_data["profile"]["exp"] = 0
    save_profile(context.user_data["profile"])
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /–∞–Ω–∫–µ—Ç–∞ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")
    return ConversationHandler.END

async def cancel_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# show profile helper
async def show_profile_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    prof = get_profile(user_id)
    if not prof:
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    text = f"–ò–º—è: {prof.get('name') or '-'}\n–í–æ–∑—Ä–∞—Å—Ç: {prof.get('age') or '-'}\n–†–æ–ª—å: {prof.get('role') or '-'}\n–û–ø—ã—Ç: {prof.get('exp')}\n\n–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:\n{prof.get('bio') or '-'}"
    buttons = []
    buttons.append([InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data=f"inv:{user_id}"),
                    InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats:{user_id}")])
    if update.effective_user.id == user_id:
        buttons.append([InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{user_id}")])
    kb = InlineKeyboardMarkup(buttons)
    if prof.get("photo_id"):
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=prof.get("photo_id"), caption=text, reply_markup=kb)
    else:
        await update.message.reply_text(text, reply_markup=kb)

# callback queries for inventory / stats / edit
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    kind, uid = data.split(":",1)
    uid = int(uid)
    prof = get_profile(uid)
    if not prof:
        await q.edit_message_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if kind == "inv":
        inv = prof.get("inventory") or "[]"
        try:
            inv_list = json.loads(inv) if isinstance(inv, str) else inv
        except:
            inv_list = []
        text = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + ("\n".join(f"- {i}" for i in inv_list) if inv_list else "–ü—É—Å—Ç–æ")
        await q.edit_message_text(text)
    elif kind == "stats":
        stats = prof.get("stats") or "{}"
        try:
            stats_d = json.loads(stats) if isinstance(stats, str) else stats
        except:
            stats_d = {}
        text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + ("\n".join(f"{k}: {v}" for k,v in stats_d.items()))
        await q.edit_message_text(text)
    elif kind == "edit":
        # only owner can edit
        if update.effective_user.id != uid:
            await q.edit_message_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã.")
            return
        # offer simple edit menu
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"editname:{uid}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"editphoto:{uid}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"editbio:{uid}")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    elif data == "cancel":
        await q.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# simple edit handlers (for demo keep linear)
async def edit_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data.startswith("editname:"):
        await q.edit_message_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
        context.user_data["awaiting_edit"] = ("name", int(data.split(":")[1]))
    elif data.startswith("editphoto:"):
        await q.edit_message_text("–ü—Ä–∏–∫—Ä–µ–ø–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        context.user_data["awaiting_edit"] = ("photo", int(data.split(":")[1]))
    elif data.startswith("editbio:"):
        await q.edit_message_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é:")
        context.user_data["awaiting_edit"] = ("bio", int(data.split(":")[1]))
    elif data == "cancel":
        await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")

async def message_edit_receiver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "awaiting_edit" not in context.user_data:
        return
    field, uid = context.user_data["awaiting_edit"]
    if update.effective_user.id != uid:
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        context.user_data.pop("awaiting_edit", None)
        return
    prof = get_profile(uid) or {"user_id": uid, "username": update.effective_user.username}
    if field == "name":
        prof["name"] = update.message.text.strip()
    elif field == "bio":
        prof["bio"] = update.message.text.strip()
    elif field == "photo":
        if update.message.photo:
            prof["photo_id"] = update.message.photo[-1].file_id
        else:
            await update.message.reply_text("–§–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–º–µ–Ω–∞.")
            context.user_data.pop("awaiting_edit", None)
            return
    save_profile(prof)
    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    context.user_data.pop("awaiting_edit", None)

# ---------- Flask keepalive ----------
flask_app = Flask("keepalive")
@flask_app.route("/")
def index():
    return Response("OK", status=200)
def run_flask():
    flask_app.run(host="0.0.0.0", port=PORT)

# ---------- Setup and run ----------
def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("–∞–Ω–∫–µ—Ç–∞", profile_cmd)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_step)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_step)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, role_step)],
            PHOTO: [MessageHandler((filters.PHOTO | filters.TEXT) & ~filters.COMMAND, photo_step)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, bio_step)],
        },
        fallbacks=[CommandHandler("cancel", cancel_profile)],
        allow_reentry=True
    )

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("roll", roll_cmd))
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(callback_handler, pattern=r"^(inv:|stats:|edit:)\d+"))
    app.add_handler(CallbackQueryHandler(edit_choice_handler, pattern=r"^(editname:|editphoto:|editbio:|cancel)"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_edit_receiver))
    # start Flask in thread, then polling
    Thread(target=run_flask, daemon=True).start()
    app.run_polling()

if __name__ == "__main__":
    main()
